{"version":3,"sources":["../../../lib/services/toast.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,eAAA,GAAgB,MAAQ,SAAA,CAAU;AAI3C;IAYI;QARA,cAAS,GAAQ;YACb,IAAI,EAAE,KAAK;YACX,KAAK,EAAE,KAAK;YACZ,GAAG,EAAE,KAAK;YACV,MAAM,EAAE,KAAK;SAChB,CAAC;QACF,UAAK,GAAY,KAAK,CAAC;QAGnB,IAAI,CAAC,OAAO,GAAG,IAAI,eAAe,CAAC,EAAE,CAAC,CAAC;QACvC,IAAI,CAAC,IAAI,GAAG,IAAI,eAAe,CAAC,EAAE,CAAC,CAAC;IACxC,CAAC;IAED,6BAAI,GAAJ,UAAK,OAAe,EAAE,IAAY,EAAE,QAAoB,EAAE,KAAsB;QAA5C,yBAAA,EAAA,eAAoB;QAAE,sBAAA,EAAA,aAAsB;QAE5E,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACX,GAAG,CAAC,CAAC,IAAM,KAAK,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gBACjC,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBAClB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;gBAC5C,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;gBAClC,CAAC;YACL,CAAC;QACL,CAAC;QAED,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACR,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QACtB,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC3B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzB,CAAC;IAOL,qBAAC;AAAD,CA1CA,AA0CC;;AANM,yBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,6BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC","file":"toast.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { BehaviorSubject, } from \"rxjs/Rx\";\r\n\r\n\r\n\r\nexport class KitchenService {\r\n\r\n    message: BehaviorSubject<any>;\r\n    type: BehaviorSubject<any>;\r\n    positions: any = {\r\n        left: false,\r\n        right: false,\r\n        top: false,\r\n        bottom: false\r\n    };\r\n    slide: boolean = false;\r\n    \r\n    constructor() {\r\n        this.message = new BehaviorSubject(\"\");\r\n        this.type = new BehaviorSubject(\"\");\r\n    }\r\n\r\n    cook(message: string, type: string, position: any = null, slide: boolean = false) {\r\n        \r\n        if (position) {\r\n            for (const index in this.positions) {\r\n                if (position[index]) {\r\n                    this.positions[index] = position[index];\r\n                } else {\r\n                    this.positions[index] = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (slide) {\r\n            this.slide = true;\r\n        }\r\n\r\n        this.message.next(message);\r\n        this.type.next(type);\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}